<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAABwkA
        AxoHAA4xBgUWRgYIGVEGCBlRBgUVRQcADjEJAAIZCgAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAABCAENFQcJ
        GUkGGC6FBSxIuQZAYdcJUXTnC1p97Qtafe0JUXPnBkBg1wUsSLgGFy2EBwgYRwgBDRQKAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAFCggI
        GEgGHjegB0hq3xB3n/klo8n/PcHi/0/T7/9Y2/T/Wdv0/1HT7/8+weL/JaLI/xB2nvgHRmneBh41nQgI
        F0UJAAUKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgE
        ERwHFCh7BkBh3BGCrP0xvuf/U9z9/2Xl//9m3vj/YdPt/1/M5/9jzef/a9Xu/3Ti+f906P//XN78/zK9
        5v8RgKr9Bj5f2gcTJ3cIBBEaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMA
        AAAIAg8hBhsylwhYfu4eqNf/QtP8/07W+/88ud//JYmv/xdgg/8QRmX/DTtY/w48Wf8TSGb/IGOE/ziN
        sP9bv+D/a9z7/03V/P8ep9X/B1V77QcaMJMIAg4fAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAACAUSHgccM5gJZI32IrXn/z3R/v8vuub/FHmh/wg7W/8GFyz/Bwob/wcIF/8HCBf/BwgX/wcI
        F/8HDR//Bx41/w9GZv8vg6n/W8Po/1bW/v8itOX/CGGK9QcaMZQIBBEbAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAkABwwHFSl/CVmA7yCz5/8xyfz/GqXV/wpljv8UWXv/FWKF/xlTcv8VMUj/CAwc/wgK
        GP8IChj/CBMm/xVIZf8YaY//FHad/xFli/8acZr/Sq/Y/0/P/f8cseX/BlZ87gcUKHoJAAYLAAAAAAAA
        AAAAAAAAAAAAAAAAAAAJAAgCBwkaTghDZOAao9j/K8T8/xSg0v8PYIT/HYWs/x6dy/8vsNv/LaTS/xWA
        rf8GOVb/CA0d/wgUJv8GUXX/EJDB/yes2v8pst7/F5/P/x2Otf8bZIj/RKjT/0DI/P8QoNX/BkBh3QgJ
        GUkJAAYCAAAAAAAAAAAAAAAAAAAAAAgCDhoHIjqnEoGx/Sm7+P8hu/b/B2mT/yBsiv8rrtj/JKbV/07G
        6P86u+P/IqfW/w58qP8HHjX/Bi5J/xCRv/8frdv/Mbrj/0TD5/8fo9L/La/Y/x9nhv8ZY4j/Qr/y/yG7
        +P8Hfa39BiA4owgCDhcAAAAAAAAAAAAAAAALAAABBwsbUgtNceQgrOf/LLv6/yS/9v8HeKX/FYGp/xea
        y/8mpdP/L6zV/ySq1/84vOT/GZ3L/whIaP8IWn//GKTU/zG54/8hqdb/JqjT/xqg0f8YnMz/Gn6l/xF7
        qP89w/X/L7v6/w2o5f8FSW3iCAoaTQsAAAEAAAAAAAAAAAkAAAoHHDORFHmn+yC3+P8WqOH/EXyo/wly
        oP8ShrL/EpjK/yKn2P9DvOL/WM7r/0TC5/8apNb/CmeP/wlynf8Yqdz/Q8br/1bQ7f87u+P/GaTX/xGW
        yP8Tg7D/DXOe/yeJs/8/tev/G7b4/wR0o/oHGjCMCQAACQAAAAAAAAAABwAIIQkzUMQemM//FrX5/wV4
        qP8VTGj/JpG2/xKWx/8UnM//LbDe/zSt1P8ys9r/MLnj/yWn1v8efaj/H4ax/yKq2P8mst7/J6jT/zKu
        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
        AA/wAAAP+AAAH/4AAH//AAD//8AD///+f/8=
</value>
  </data>
</root>